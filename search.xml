<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>docker常用命令</title>
      <link href="/2024/07/23/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2024/07/23/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="docker常用命令"><a href="#docker常用命令" class="headerlink" title="docker常用命令"></a>docker常用命令</h2><p>显示当前正在运行的<code>docker</code>容器</p><pre><code class="shell">docker ps  # -a / --all: 显示所有容器</code></pre><p>显示本地主机上的镜像</p><pre><code class="shell">docker images</code></pre><p>开启指定容器的交互式终端</p><pre><code class="shell">docker exec -it 容器id /bin/bash</code></pre><p>获取容器长<code>ID</code></p><pre><code>docker inspect -f &#39;&#123;&#123;.ID&#125;&#125;&#39; 容器名</code></pre><p>拷贝主机文件到容器中</p><pre><code>docker ps 主机文件路径 容器长ID:docker容器路径</code></pre><p>拷贝容器文件到主机中</p><pre><code>docker ps 容器长ID:docker容器路径 主机文件路径 </code></pre>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Dockerfile创建镜像</title>
      <link href="/2024/07/23/%E5%9F%BA%E4%BA%8EDockerfile%E5%88%9B%E5%BB%BA%E9%95%9C%E5%83%8F/"/>
      <url>/2024/07/23/%E5%9F%BA%E4%BA%8EDockerfile%E5%88%9B%E5%BB%BA%E9%95%9C%E5%83%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="基于Dockerfile创建镜像"><a href="#基于Dockerfile创建镜像" class="headerlink" title="基于Dockerfile创建镜像"></a>基于Dockerfile创建镜像</h2><h3 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h3><pre><code class="shell">docker build -t &#123;镜像名:镜像标签&#125; .  # docker build -t test:v1 .</code></pre><p>上述命令会根据当前文件夹下的<code>Dockerfile</code>文件(文件内容如下)来创建镜像</p><pre><code class="shell">FROM ubuntu:22.04  # 指定新镜像所基于的镜像MAINTAINER By Abel  # 说明新镜像的维护人信息# 在所基于的镜像上执行命令RUN cd ~  # 进入root根目录RUN apt-get update &amp;&amp; apt-get install -y wget  # 更新 Ubuntu 包索引并安装 wget</code></pre><p>系统镜像下载超时时可以进行<code>docker</code>换源</p><ul><li><strong>获取阿里镜像加速器地址(免费、面向个人开发者)</strong></li></ul><blockquote><p>登录<a href="https://cr.console.aliyun.com/">容器镜像服务控制台</a>，在左侧导航栏选择<strong>镜像工具</strong> &gt; <strong>镜像加速器</strong>，在<strong>镜像加速器</strong>界面获取<strong>加速器地址</strong></p><p>例如： https:&#x2F;&#x2F;[系统分配前缀].mirror.aliyuncs.com</p></blockquote><ul><li><strong>配置镜像加速器</strong></li></ul><blockquote><p>针对<code>Docker</code>客户端版本大于1.10.0的用户，可以通过修改配置文件<code>/etc/docker/daemon.json</code>来使用</p><pre><code class="shell">sudo tee /etc/docker/daemon.json &lt;&lt;-&#39;EOF&#39;&#123;  &quot;registry-mirrors&quot;: [&quot;https://[系统分配前缀].mirror.aliyuncs.com&quot;]&#125;EOFsudo systemctl daemon-reloadsudo systemctl restart docker</code></pre></blockquote><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><pre><code class="bash">docker run -p HOST_PORT:CONTAINER_PORT  # 将容器的端口映射到宿主机的端口            -it  # 交互式运行并分配终端           -d  # 以守护进程模式运行容器           --net=bridge  # 指定网络连接, 默认为bridge           --gpus all  # 容器可以访问主机所有GPU设备           -e NVIDIA_DRIVER_CAPABILITIES=compute,utility  # 容器可以使用GPU执行计算任务           -e NVIDIA_VISIBLE_DEVICES=all  # GPU对所有程序可见           test_img  # 镜像名           /bin/sh  # 交互式运行并启动终端</code></pre>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实用工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>参数解析器</title>
      <link href="/2024/07/22/%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90%E5%99%A8/"/>
      <url>/2024/07/22/%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="参数解析器"><a href="#参数解析器" class="headerlink" title="参数解析器"></a>参数解析器</h2><p>在运行python程序的时候，往往需要在命令之后传入参数</p><h4 id="依赖导入"><a href="#依赖导入" class="headerlink" title="依赖导入"></a>依赖导入</h4><pre><code class="python">import argparse</code></pre><h4 id="实例化参数解析器"><a href="#实例化参数解析器" class="headerlink" title="实例化参数解析器"></a>实例化参数解析器</h4><pre><code class="python">parser = argparse.ArgumentParser()</code></pre><p>常用参数</p><ul><li><code>description</code>：帮助文档描述(头部)</li><li><code>epilog</code>：帮助文档描述(尾部)</li><li><code>add_help</code>：添加<code>-h / --help</code>选项来显示帮助文档，默认值为<code>True</code></li></ul><h4 id="添加参数设置"><a href="#添加参数设置" class="headerlink" title="添加参数设置"></a>添加参数设置</h4><p>添加一个<code>-v</code>或<code>--version</code>来传入参数</p><pre><code class="python">parser.add_argument(&#39;-v&#39;, &#39;--version&#39;)</code></pre><p>常用参数</p><ul><li><p><code>type</code>：命令行参数被转换成的类型，如<code>str</code>、<code>int</code>、<code>float</code>等</p></li><li><p><code>default</code>：默认值设置</p></li><li><p><code>help</code>：对于此参数的描述会被打印至帮助文档中</p></li><li><p><code>action</code>：指定该参数的动作</p><ul><li><pre><code class="python"># 携带 -v 时该值设置为True, 默认为Falseparser.add_argument(&#39;-v&#39;, action=&#39;store_true&#39;)# 与上述相反parser.add_argument(&#39;-v&#39;, action=&#39;store_false&#39;)</code></pre></li></ul></li><li><p><code>required</code>：表示参数是否必须传入，默认值为<code>False</code></p></li></ul><h4 id="解析获取的参数"><a href="#解析获取的参数" class="headerlink" title="解析获取的参数"></a>解析获取的参数</h4><pre><code class="python">args = parser.parse_args()</code></pre><hr><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><pre><code class="python">import argparseparas = argparse.ArgumentParser(description=&#39;Test&#39;, epilog=&#39;By Abel&#39;)paras.add_argument(&#39;--input_path&#39;, default=&#39;./input&#39;, type=str, help=&#39;输入路径&#39;)paras.add_argument(&#39;--output_path&#39;, default=&#39;./output&#39;, type=str, help=&#39;输出路径&#39;)args = paras.parse_args()print(&#39;input path:&#39;, args.input_path)print(&#39;output path:&#39;, args.output_path)# 输出&gt; python test.py -husage: test.py [-h] [--input_path INPUT_PATH] [--output_path OUTPUT_PATH]Testoptions:  -h, --help            show this help message and exit  --input_path INPUT_PATH                        输入路径  --output_path OUTPUT_PATH                        输出路径By Abel&gt; python test.pyinput path: ./inputoutput path: ./output</code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实用工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux常用命令</title>
      <link href="/2024/07/08/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2024/07/08/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="linux常用命令"><a href="#linux常用命令" class="headerlink" title="linux常用命令"></a>linux常用命令</h2><p>显示磁盘使用情况</p><pre><code class="shell">df -h  # 显示磁盘空间使用情况du -h --max_depth=1  # 显示当前目录的磁盘使用情况</code></pre><p>查看指定端口的进程信息</p><pre><code class="sh">lsof -i 8888</code></pre><p>指定显卡用于后台执行程序</p><pre><code class="sh">CUDA_VISIBLE_DEVICES=0 nohup python demo.py &gt; out.log 2&gt;&amp;1 &amp;</code></pre><p>查看进程信息</p><pre><code class="sh">ps  # 显示当前用户的所有进程(不包括进程调用的子进程)ps -aux  # 显示所有用户的进程详细信息ps -aux | grep xxx  # 查看指定进程信息(如 ps -aux | grep python )top  # 实时显示系统中各个进程的资源占用情况(所有用户)、q 退出top -u xxx  # 实时显示系统中各个进程的资源占用情况(指定用户)top -u xxx | grep yyy  # 实时显示系统中指定进程的资源占用情况(指定用户)</code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell批量下载文件</title>
      <link href="/2024/07/07/shell%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/"/>
      <url>/2024/07/07/shell%E6%89%B9%E9%87%8F%E4%B8%8B%E8%BD%BD%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="shell-批量下载文件"><a href="#shell-批量下载文件" class="headerlink" title="shell 批量下载文件"></a>shell 批量下载文件</h2><p>使用 shell 脚本可以批量下载文件(以 wget 命令为例)</p><pre><code class="shell">#!/bin/bash# 文件数组files=(&quot;https://example.com/1.txt&quot; &quot;https://example.com/1.txt&quot;)# 下载目录download_dir=&quot;/download/&quot;for url in &quot;$&#123;files[@]&#125;&quot;do  # 提取文件名  filename=$(basename &quot;$url&quot;)    # 下载文件  echo &quot;正在下载文件: $filename&quot;  wget &quot;$url&quot; -o &quot;$download_dir&quot; --progress=bar:force    # 检查是否下载成功  if [ $? -eq 0 ]   then    echo &quot;$filename 下载成功&quot;  else    echo &quot;$filename 下载失败&quot;  fidone</code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gitalk</title>
      <link href="/2024/01/13/Gitalk/"/>
      <url>/2024/01/13/Gitalk/</url>
      
        <content type="html"><![CDATA[<h2 id="Gitalk"><a href="#Gitalk" class="headerlink" title="Gitalk"></a>Gitalk</h2><p>Gitalk 是一个基于 Github Issue 和 Preact 开发的评论插件。详情请访问官网 <a href="https://github.com/gitalk/gitalk">Gitalk</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><hr><ul><li>npm 安装</li></ul><pre><code>npm i gitalk  --save </code></pre><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><hr><ol><li>需要选择一个公共 github 存储库用于存储评论；然后创建 <a href="https://github.com/settings/applications/new">Github Application</a>，并填写相关信息</li><li>应用到页面上</li></ol><pre><code class="vue">&lt;template&gt;    &lt;div id=&quot;gitalk-container&quot;&gt;&lt;/div&gt;&lt;/template&gt;&lt;script&gt;   import &#39;gitalk/dist/gitalk.css&#39;   import Gitalk from &#39;gitalk&#39;            var gitalk = new Gitalk(&#123;          clientID: &#39;GitHub Application Client ID&#39;,          clientSecret: &#39;GitHub Application Client Secret&#39;,          repo: &#39;GitHub repo&#39;,          owner: &#39;GitHub repo owner&#39;,          admin: [&#39;GitHub repo owner and collaborators&#39;],          id: location.pathname,  // Ensure uniqueness and length less than 50          distractionFreeMode: false  // Facebook-like distraction free mode    &#125;)    gitalk.render(&#39;gitalk-container&#39;)&lt;/script&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 开发小工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/01/11/hello-world/"/>
      <url>/2024/01/11/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
